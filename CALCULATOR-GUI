#program gui calculator dv as devi
#description:

#program: NI KADEK DEVNDHA ASRI WIDHIANTIKA_F1F02410064
#tgl: 4/1/2025

import tkinter as tk
from math import sqrt

class Calculator:
    def _init_(self, root):
        self.root = root
        self.root.title("Calculator dv")
        self.expression = ""
        self.root.geometry("500x400")
        self.root.config(bg='#FFB6C1')
       
        self.entry = tk.Entry(root, width=30, borderwidth=20, font=('Aharoni', 18), justify='right')
        self.entry.grid(row=0, column=0, columnspan=5, pady=10, padx=10)
        self.entry.bind("<Key>", self.validate_keypress)
        
        button_labels = [
        '7', '8', '9', '/', 'C',
        '4', '5', '6', '*', 'DEL',
        '1', '2', '3', '-', '^',
        '.', '0', '()', '+', '='    
        ]
        
        row = 1
        col = 0
        for label in button_labels:
            button = tk.Button(root, text=label, padx=4, pady=4, font=('Aharoni', 24))
            if label not in ['C', '=', 'DEL']:
                button.config(command=lambda l=label: self.on_button_click(l))
            elif label == 'C':
                button.config(command=self.on_clear)
            elif label == '=':
                button.config(command=self.on_equal)      
            elif label == 'DEL':
                button.config(command=self.on_backspace)
            else:
                button.config(command=lambda l=label: self.on_funtion_click(l))

            button.grid(row=row, column=col, padx=5, pady=5, sticky= "nsew")
            col += 1
            if col > 4:
                col = 0
                row += 1

        for i in range(5):
            root.grid_columnconfigure(i, weight=1)
        for i in range(1, 7):
            root.grid_rowconfigure(1, weight=1)

    def validate_keypress(self, event):
        valid_keys = "0123456789+-*/().^"
        if event.char in valid_keys:
            return True
        elif event.keysym in ('Return', 'BackSpace'):
            return True
        else:
            return "break"
    
    def on_button_click(self, char):
        self.expression += str(char)
        self.update_entry()

    def on_clear(self):
        self.expression = ""
        self.update_entry()

    def on_backspace(self):
        self.expression = self.expression[:-1]
        self.update_entry()

    def on_equal(self):
        try:
            self.expression = self.expression.replace('^', '')
            result = eval(self.expression)
            self.update_entry(result)
            self.expression = str(result)
        except Exception as e:
            self.update.entry("Error")
            self.expression = ""

    def update_entry(self, value=None):
        self.entry.delete(0, tk.END)
        if value is not None:
            self.entry.insert(tk.END, str(value))
        else:
            self.entry.insert(tk.END, self.expression)

if _name_ == "_main_":
    root = tk.Tk()
    calculator = Calculator(root)
    root.mainloop()
